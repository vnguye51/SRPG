Game Logic
* Player chooses a character. All characters EXCEPT the one chosen are part of the player's team
	* ALl characters have these stats.
		* Attack Power
		* Health Points
		* Counter attack power

* The player selects a character on their side of the field and then a character on the enemy's side of the field as the target
	* The enemy's health is subtracted by the player character's attack power
	* The enemy then retaliates with his Counter Attack Power

* Once a player has attacked with all of his side's characters(or passed) the enemy then does the same thing
	* for now the enemy will randomly select one of the player's characters( later we can add it to prioritize kills)

* If the enemy's health is 0 you win
* If all characters on your side are 0 you lose


Code organization
* Each character is an object:
	* Div reference
	* Name
	* Attack Power
	* Health Points
	* Counter attack power
	* Ally/Enemy
	* Methods: attack(target)
		


This continues until one of the characters are dead{

Phases:

Select Char -> Select Target -> Attack if target is an enemy

* Every character is a <div></div> 
* Create two pointers: PlayerChar and Target
	* When a <div></div> is selected on click set PlayerChar to reference the corresponding div
		* On the second onclick the player if the click is a valid target(has Ally: false) call attack(Target)
		
* Repeat for the enemy, however the pointers are randomly generated
}


Movement:
Possible movement: Flood-fill algorithm with map
*Load a base map(text file) containing the array and the steps needed to enter each tile
* create an empty second map with tilepos: path. Path is an object with properties: steps left, and pathtaken
*We will also have an open and a closed set

1. initialize the open set with the starting position
2. While the open set is not empty
	3. set curr to open[0] and move open[0] to the closed set
	4. for all neighbors 
		5. if travelmap[curr].stepsleft - basemap[neighbor] < 0:
			continue
			else if travelmap[curr].stepsleft - basemap[neighbor] == 0:
				add neighbor to the closedset (the key:value pair will just be replaced if its already there) along with its new stepsleft and the path taken
			else (if travelmap[curr].stepsleft - basemap[neighbor] > 0)
				add neighbor to the openset along with its new stepsleft and the path taken

6. the closedset are all possible tiles that can be reached


Enemy AI:
{
	*Loop through the array containing the enemy object references
	*The enemy knows the location of the player
	*The enemy moves to the closest possible tile
}