Game Logic
* Player chooses a character. All characters EXCEPT the one chosen are part of the player's team
	* ALl characters have these stats.
		* Attack Power
		* Health Points
		* Counter attack power

* The player selects a character on their side of the field and then a character on the enemy's side of the field as the target
	* The enemy's health is subtracted by the player character's attack power
	* The enemy then retaliates with his Counter Attack Power

* Once a player has attacked with all of his side's characters(or passed) the enemy then does the same thing

* If all enemies are defeated you win
* If all allies are defeated you lose


Code organization
* Each character is an object:
	* Div reference
	* Name
	* Attack Power
	* Health Points
	* Counter attack power
	* Dodge
	* Hit
	* Ally/Enemy
	* Methods: attack(target)
	* moveto(row,col)
		

Phases:

Select Char -> Select Target -> Move to Target -> Select Enemy -> Attack Enemy -> Enemy Turn -> Select Char

* Every character is a <div></div> 
* Create two pointers: PlayerChar and Target
	* When a <div></div> is selected on click set PlayerChar to reference the corresponding div
		* On the second onclick the player if the click is a valid target(has Ally: false) call attack(Target)
}


Movement:
Possible movement: Flood-fill algorithm with map
*Load a base map(text file) containing the array and the steps needed to enter each tile
* create an empty second map with tilepos: path. Path is an object with properties: steps left, and pathtaken
*We will also have an open and a closed set

1. initialize the open set with the starting position
2. While the open set is not empty
	3. set curr to open[0] and move open[0] to the closed set
	4. for all neighboring tiles
	    5. Calculate how many steps are left if the neighbor is moved into
		6. If we've already calculated this tile, only replace it in the travel map if it is a more optimal path
			If we do not have enough steps to move into the tile put it in the closed set and move to the next neighbor
			If we did have enough steps add that tile to the Open set

7. The map contains the location and contains the path taken to that location


Enemy AI:
{
	*Loop through the array containing the enemy object references
	*The enemy knows the location of the nearest player
	*The enemy moves to the closest possible tile
}



* Player Turn:
	* Select character	
	* Movement
		* Attack	
		* If all allied characters are inactive
			* Move to opponents turn
		* Else return to select character


* Enemy phase:
	* For each character in enemyarray:
		*Determine distance from each Ally
		* If the ally is nearby 
		*Of the tiles in the flood fill choose 

* Bugs:
clicking on yourself after movement/attack crashes the page
	*Could be due to clicking on an inactive character during the chooseplayer phase

* organize attacking/movement code into function
	* Always attempt the attack/move but if the target is invalid then change to the correct Phases
	* if it is move to the next phase

*  Possible move spaces show tiles with enemies on them

ShortestPath Algorithm(start,target)//completed but might need fine tuning due to blocked spaces
* initialize closedSet and openset, openset contains the start position
* store in a map the most efficient prevStep to get into that tile
* store in the map the cost of going from the start to that tile
* store in the map the estimated cost of going from the start to the target
* create an estimated cost function from start to target
* estimated cost is the number of vertical and horizontal moves to get there without considering weights



* while the openset is not empty
	*for each neighbor:
		* if neighbor is in closedset:
			continue
		* score = starttopos[current] + weights[neighbor]

		* if neighbor not in openset:
			add neighbor to the set
		* else if the score was not lower
			continue
		*else
			cameFrom[neighbor] = current
			starttopos = score
			estimatedcost = starttopos[neighbor] + estimate(neighbor,target) 


KNOWN BUGS:
* The shortestpath algorithm works but it should not be called on the enemy player's space but rather an empty
tile next to the player
	*Find the nearest empty tile next to the player and path there
*Enemies do not attack unless they start their turn next to you
*Labels do not have a priority

THINGS TO ADD:
* link to instruction page
* stock image(emblem?) for enemies and allies
* link to the basic game
* updatetileweights are probably being called too often